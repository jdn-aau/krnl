#include <krnl.h>
// one task loops and blink
// k_wait ensures proper timing

struct k_t *p1, *p2,*s1, *semmutex;

// shared data
struct shDataTp{
int v;
int counter;
};

struct shDatatp  sharedData={0,0};

void saveDataInCritRegion(int v)
{
  k_wait(semmutex,0);
  sharedData = v;
  k_signal(semmutex);
}

int getDataInCritRegion(void)
{
int tmp;
  k_wait(semmutex,0);
  tmp = sharedData;
  k_signal(semmutex);
  return tmp;
}

// the sampler task
void t1()
{  
int ;
  k_set_sem_timer(s1,100);
  while (1) {
    k_wait(s1,0); //wait until  a kick comes

    v = analogread(A0);
    saveDataInCritRegion(v);
 }  
}

void t2()
{  
 int vv;
  while (1) { 
    k_sleep(345);
    vv = getDataInCritRegion();
    Serial.println(vv);
  }  // do we keep up in pace ?  
}

 
void setup()
{
  int res;
  Serial.begin(9600);
  while (! Serial) ;
  pinMode(13,OUTPUT);
  
  k_init(2,2,0);  // init with space for one task
  //         |--- no of mg Queues (0)
  //       |----- no of semaphores (0)  
  //     |------- no of tasks (2)

  // priority low number higher priority than higher number
  p1 = k_crt_task(t1,10,100); // t1 as task, priority 10, 100 B stak
  p2 = k_crt_task(t1,10,100); // t1 as task, priority 10, 100 B stak

  s1 = k_crt_sem(0,10);
  semmutex = k_crt_sem(1,10); // must be 1 otherwise no one can come inside
  res= k_start(1); // 1 milli sec tick speed
  // you will never return from k_start
  Serial.print("ups an error occured: "); Serial.println(res);
  while (1) ;
}

void loop() {}
