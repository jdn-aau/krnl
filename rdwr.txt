
// IF YOU WANT READER WRITER LOCK THEN DEFINE

#define READERWRITER


#ifdef READERWRITER


 struct k_rwlock_t  {
int nrReaders;
struct k_t * rdwrSem, *rdSem, *fifoSem;
};
 
//https://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem

int k_rwInit(struct k_rwlock_t *lock)
{
struct k_t *el;
  lock->nrReaders = 0;
  
  el = k_crt_sem(1,2);
  if (el == NULL) {
    return -1;
  }
  lock->rdwrSem = el; 
  
  el = k_crt_sem(1,2);
  if (el == NULL) {
    return -1;
  }
  lock->rdSem = el; 
  
  el = k_crt_sem(1,2);
  if (el == NULL) {
    return -1;
  }
  lock->fifoSem = el ; 
  
  return 0; // ok
}



int k_rwRdEnter(struct k_rwlock_t *lock, int timeout)
{
// timeout tbi later - if...
   k_wait(lock->fifoSem,0);
   k_wait(lock->rdSem,0);
   
   lock->nrReaders++;
   if (lock->nrReaders == 1)
     k_wait(lock->rdwrSem,0); 
   k_signal(lock->fifoSem);
   k_signal(lock->rdSem);
  return 0; // ok
}

int k_rwWrEnter(struct k_rwlock_t *lock, int timeout)
{
  k_wait(lock->fifoSem,0);
  k_wait(lock->rdwrSem,0);
  k_signal(lock->fifoSem);
  return 0; // ok 
}

int k_rwRdLeave(struct k_rwlock_t *lock)
{
  k_wait(lock->rdSem,0);
  lock->nrReaders--;
  if (lock->nrReaders == 0) {
    k_signal(lock->rdwrSem);
  }
  k_signal(lock->rdSem);
}

int k_rwWrLeave(struct k_rwlock_t *lock)
{
  k_signal(lock->rdwrSem);
}

#endif
